AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EnableCognito:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
      - 'Exist'
  TranscriptBucket:
    Type: String
  LambdaZipsBucket:
    Type: String
  UserPoolId:
    Type: String
  AppClientId:
    Type: String
  ConnectInstanceId:
    Type: String
  CustomerProfilesDomain:
    Type: String
  EngageOrigin:
    Type: String
  LMWorkspace:
    Type: String

Conditions:
  CreateCognitoResources: !Equals [ !Ref 'EnableCognito', 'Yes' ]

Resources:
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Select [2, !Split ['/', !Ref 'AWS::StackId']]
      MinimumCompressionSize: 0
  ProdDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - 'ProxyANY'
      - 'ProxyCORS'
    Properties:
      RestApiId: !Ref 'RestAPI'
  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      RestApiId: !Ref 'RestAPI'
      DeploymentId: !Ref 'ProdDeployment'
  Proxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt 'RestAPI.RootResourceId'
      PathPart: '{proxy+}'
      RestApiId: !Ref 'RestAPI'
  ProxyANY:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'RestAPI'
      ResourceId: !Ref 'Proxy'
      HttpMethod: ANY
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref 'ProxyAuthorizer'
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainHandler.Arn}/invocations'
  ProxyCORS:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref 'RestAPI'
      ResourceId: !Ref 'Proxy'
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainHandler.Arn}/invocations'
  ProxyAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: Cognito
      RestApiId: !Ref 'RestAPI'
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub
          - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${PoolId}
          - { 'PoolId': !If [CreateCognitoResources, !Ref 'UserPool', !Ref 'UserPoolId'] }
  ApiGatewayInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'MainHandler'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*/*'
  MainHandler:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: 202108/signed-f7402c62-a7d5-4bfe-87b2-bb827db25341.zip
      Handler: lambda_function.lambda_handler
      Role: !GetAtt 'MainHandlerRole.Arn'
      Runtime: python3.7
      Environment:
        Variables:
          TRANSCRIPT_BUCKET: !Ref 'TranscriptBucket'
          IDENTITY_POOL_ID: !Ref 'IDPool'
          TBL_SESSION: !Ref 'SessionTable'
          ENGAGE_ORIGIN: !Sub 'https://${EngageOrigin}'
          CI_COMMIT_SHORT_SHA: adf5d53e
          CFN_VERSION: 20200810
  MainHandlerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: HandlerPolicies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt 'SessionTable.Arn'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${TranscriptBucket}/*'
  UserPool:
    Type: AWS::Cognito::UserPool
    Condition: CreateCognitoResources
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Condition: CreateCognitoResources
    Properties:
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      ClientName: app-client
      CallbackURLs:
        - !Sub 'https://${EngageOrigin}/auth_redirect'
        - !Sub 'https://${EngageOrigin}/auth_redirect?lm_workspace=${LMWorkspace}'
      LogoutURLs:
        - !Sub 'https://${EngageOrigin}'
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref 'UserPool'
  IDPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !If [CreateCognitoResources, !Ref 'AppClient', !Ref 'AppClientId']
          ProviderName: !Sub
            - 'cognito-idp.${AWS::Region}.amazonaws.com/${PoolId}'
            - { 'PoolId': !If [CreateCognitoResources, !Ref 'UserPool', !Ref 'UserPoolId'] }
  IDPoolUnauthenticated:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 'sts:AssumeRoleWithWebIdentity'
          Principal:
            Federated: cognito-identity.amazonaws.com
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref 'IDPool'
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': unauthenticated
  IDPoolAuthenticated:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action: 'sts:AssumeRoleWithWebIdentity'
          Principal:
            Federated: cognito-identity.amazonaws.com
          Condition:
            StringEquals:
              'cognito-identity.amazonaws.com:aud': !Ref 'IDPool'
            ForAnyValue:StringLike:
              'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: ConnectPolicies
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - connect:ListQueues
                  - connect:DescribeQueue
                Resource:
                  - !Sub 'arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}/queue/*'
              - Effect: Allow
                Action:
                  - connect:StartTaskContact
                  - connect:ListContactFlows
                Resource:
                  - !Sub 'arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}/contact-flow/*'
              - Effect: Allow
                Action:
                  - connect:UpdateContactAttributes
                  - connect:GetContactAttributes
                  - connect:SuspendContactRecording
                  - connect:ResumeContactRecording
                Resource:
                  - !Sub 'arn:aws:connect:${AWS::Region}:${AWS::AccountId}:instance/${ConnectInstanceId}/contact/*'
              - Effect: Allow
                Action:
                  - profile:CreateProfile
                  - profile:SearchProfiles
                  - profile:UpdateProfile
                Resource: !Sub 'arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${CustomerProfilesDomain}'
              - Effect: Allow
                Action:
                  - profile:ListProfileObjects
                  - profile:DeleteProfileObject
                  - profile:PutProfileObject
                  - profile:AddProfileKey
                  - profile:DeleteProfileKey
                Resource:
                  - !Sub 'arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${CustomerProfilesDomain}'
                  - !Sub 'arn:aws:profile:${AWS::Region}:${AWS::AccountId}:domains/${CustomerProfilesDomain}/object-types/*'
  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref 'IDPool'
      Roles:
        unauthenticated: !GetAtt 'IDPoolUnauthenticated.Arn'
        authenticated: !GetAtt 'IDPoolAuthenticated.Arn'
  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Subject
          AttributeType: 'S'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: Subject
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ExpiredTimestamp
        Enabled: true
